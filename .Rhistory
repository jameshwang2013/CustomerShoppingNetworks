left_join(outAvgStr_rev, by=c("node" = "fromNode")) %>%
left_join(inAvgStr_rev, by=c("node" = "toNode")) %>%
mutate(node = as.factor(node),
avg_str_out = avg_strength.x,
avg_str_in = avg_strength.y,
avg_str_out = replace(avg_str_out, is.na(avg_str_out) == TRUE, 0.0),
avg_str_in = replace(avg_str_in, is.na(avg_str_in) == TRUE, 0.0)) %>%
select(-node, -avg_strength.x, -avg_strength.y,
Indvdl_Revenue = revenueYear,
Directs_Out_Revenue = comb_outDir_rev,
Directs_In_Revenue = comb_inDir_rev,
Subgraph_Revenue = comb_subGr_rev,
Weighted_PageRank = wgt_pr,
Degrees_Out = out_deg,
Degrees_In = in_deg,
Betweenness_Centrality = betw_centr,
Closeness_Centrality_FullGraph = clos_centr_fullGr,
Closeness_Centrality_Subgraph = clos_centr_subGr,
Density_Subgraph = density_subGr,
Local_Clustering = cluster_coeff,
Mean_Edge_Strength_Out = avg_str_out,
Mean_Edge_Strength_In = avg_str_in)
###### correlations
data_revenue_logY <- data_revenue
data_revenue_logY$Indvdl_Revenue <- log(data_revenue_logY$Indvdl_Revenue)
data_revenue_logY$Subgraph_Revenue <- log(data_revenue_logY$Subgraph_Revenue)
# log(revenueYear), log(comb_subGr_rev), log(comb_outDir_rev)
data_revenue_logY_subsetOut <- data_revenue_logY
data_revenue_logY_subsetOut <- data_revenue_logY_subsetOut[data_revenue_logY_subsetOut$Directs_Out_Revenue > 0, ]
data_revenue_logY_subsetOut$Directs_Out_Revenue <- log(data_revenue_logY_subsetOut$Directs_Out_Revenue)
# log(revenueYear), log(comb_subGr_rev), log(comb_inDir_rev)
data_revenue_logY_subsetIn <- data_revenue_logY
data_revenue_logY_subsetIn <- data_revenue_logY_subsetIn[data_revenue_logY_subsetIn$Directs_In_Revenue > 0, ]
data_revenue_logY_subsetIn$Directs_In_Revenue <- log(data_revenue_logY_subsetIn$Directs_In_Revenue)
# log(revenueYear), log(comb_subGr_rev), log(comb_outDir_rev), log(comb_inDir_rev)
data_revenue_logY_trunc0 <- data_revenue_logY_subsetOut[data_revenue_logY_subsetOut$Directs_In_Revenue > 0, ]
data_revenue_logY_trunc0$Directs_In_Revenue <- log(data_revenue_logY_trunc0$Directs_In_Revenue)
### store results
results_for_corr_plots$data_revenue_logY_subsetOut <- data_revenue_logY_subsetOut
results_for_corr_plots$data_revenue_logY_subsetIn <- data_revenue_logY_subsetIn
results_for_corr_plots$data_revenue_logY_trunc0 <- data_revenue_logY_trunc0
###### regression: full dataset with log(revenues)
cols <- c(1:4)
names <- colnames(data_revenue_logY_trunc0)[1:4]
n <- nrow(data_revenue_logY_trunc0)
train_data <- as.matrix(data_revenue_logY_trunc0)
for (i in cols) {
if (i == 2) {
print("90% done...")
beep()
}
name <- names[i]
features <- colnames(train_data[, -i])
### train lasso regression - cross validation 1000x
lasso_features_selected <- matrix(, nrow=length(features))
lasso_features_coefficents <- matrix(, nrow=length(features))
row.names(lasso_features_selected) <- features
row.names(lasso_features_coefficents) <- features
for (j in 1:1000) {
set.seed(j)
fit_lasso <- cv.glmnet(train_data[, -i], train_data[, i],
type.measure="mse", alpha=1, family="gaussian",
standardize=TRUE, nfolds=5)
# store coefficients
lasso_coef <- coef(fit_lasso, s="lambda.1se")
# keep track of frequency selected by LASSO
selected_on_iteration <- c()
for (k in row.names(lasso_coef)) {
selected <- lasso_coef[k, ] != 0
selected_on_iteration <- c(selected_on_iteration, selected)
}
lasso_features_selected <- cbind(lasso_features_selected, matrix(selected_on_iteration[-1], ncol=1))
lasso_features_coefficents <- cbind(lasso_features_coefficents, lasso_coef[-1, , drop=FALSE])
}
freq_features_selected <- as.data.frame(rowSums(lasso_features_selected[, -c(1), drop=FALSE]) / 1000)
features_coefficients <- as.data.frame(rowSums(lasso_features_coefficents[, -c(1), drop=FALSE], na.rm=TRUE) / 1000)
colnames(freq_features_selected) <- c("lasso_selection_frequency")
colnames(features_coefficients) <- c("lasso_coefficients")
results_regressions[[paste("lasso", name, "selection", sep="_")]] <- freq_features_selected
results_regressions[[paste("lasso", name, "coefficients", sep="_")]] <- features_coefficients
# train random forest regression
set.seed(100)
rf_features_selected <- matrix(, nrow=length(features))
row.names(rf_features_selected) <- features
fit_rf <- randomForest(x=train_data[, -i], y=train_data[, i],
ntree=500, mtry=sqrt(dim(train_data[, -i])[2]),
replace=TRUE, importance=TRUE)
results_regressions[[paste("rf", name, sep="_")]] <- fit_rf$importance[, 1, drop=FALSE]
}
print("100% done.")
print("Please ignore these warnings messages: 'In left_join_impl(...)...coercing into character vector'")
beep()
return(list(results_for_corr_plots = results_for_corr_plots,
results_regressions = results_regressions))
}
###############################################################################
###### Create RESULTS MATRIX ##################################################
###############################################################################
exportResults <- function(lst, type) {
path = paste(type, "results", sep="_")
dir.create(path)
setwd(path)
coef_table <- c()
lst <- full_graph_results$results_regressions
starts <- seq(1, length(lst), 3)
names <- c("Indivdl_Revenue", "Directs_Out_Revenue", "Directs_In_Revenue", "Subgraph_Revenue")
idx <- 1
for (i in starts) {
count <- 1
full <- data.frame(row.names(lst[[i]]), lst[[i]])
colnames(full)[1] <- "features"
while (count < 3) {
j <- i + count
join <- data.frame(row.names(lst[[j]]), lst[[j]])
colnames(join)[1] <- "features"
full <- full_join(full, join, by="features")
count <- count + 1
}
write.csv(full, file=paste(names[idx], ".csv", sep=""), row.names=FALSE)
idx <- idx + 1
}
setwd("..")
}
edges <- as.matrix(links[, c(1, 2)])
g <- graph_from_edgelist(edges, directed=TRUE)
E(g)$weight <- links[, "strength"]
full_graph_results <- calculateRevenueResults(nodes, links, g)
full_graph_results$results_regressions
head(full_graph_results$results_for_corr_plots$data_revenue_logY_trunc0)
dim(full_graph_results$results_for_corr_plots$data_revenue_logY_trunc0)
full_features <- full_graph_results$results_for_corr_plots$data_revenue_logY_trunc0
y_ix <- which(colnames(full_features) == "Indvdl_Revenue")
y_ix
X_indRev <- full_features[, -y_ix]
y_indRev <- full_features[, y_ix]
head(X_indRev)
head(y_indRev0)
head(y_indRev)
dim(X_indRev)
dim(X_indRev)[2]
head(nodes)
head(links)
g
edges <- as.matrix(links[, c(1, 2)])
g <- graph_from_edgelist(edges, directed=TRUE)
E(g)$weight <- links[, "strength"]
full_graph_results <- calculateRevenueResults(nodes, links, g)
### export results
exportResults(full_graph_results$results_regressions, "full_graph")
### visualize
# pairwise correlation plots
corr_logY_all <- cor(full_graph_results$results_for_corr_plots$data_revenue_logY_trunc0)[1:4, ]
corrplot(corr_logY_all, type = "upper", order = "original", tl.col = "black", tl.srt = 45, diag=FALSE)
# pairwise scatterplots of log(revenues) + correlations + histograms + significance
#ggpairs(full_graph_results$results_for_corr_plots$data_revenue_logY_trunc0[, c(1:3)])
dev.off() # reset graphical parameters
###### inter-zipcode
zip_code_results <- list()
zips <- unique(links$zip)
for (i in zips) {
print("This takes about 30 minutes...")
print(paste("Working on zipcode: ", i, sep=""))
# check size
if (table(links$zip)[as.character(i)] < 50) {
print(paste(i, "zipcode has too few observations (less than 50). Onto the next...", sep=" "))
next
}
# get links
subset_links <- links[links$zip==i, ]
# get graph
new_edges <- as.matrix(subset_links[, c(1, 2)])
subset_g <- graph_from_edgelist(new_edges, directed=TRUE)
# get nodes
new_nodes <- c(unique(subset_links$fromNode), unique(subset_links$toNode))
subset_nodes <- nodes[nodes$node %in% new_nodes, ]
# run results
zip_code_results[[as.character(i)]] <- calculateRevenueResults(subset_nodes, subset_links, subset_g)
}
head(data_revenue)
print("Function takes about 10-15 minutes.")
###############################################################################
###### build revenue dataframes
###### Out-Direct, In-Direct, Subgraph
outDir_rev_df <- as.data.frame(matrix(, nrow=1, ncol=2))
inDir_rev_df <- as.data.frame(matrix(, nrow=1, ncol=2))
subGr_rev_df <- as.data.frame(matrix(, nrow=1, ncol=2))
order = 100
for (i in nodes$node) {
# extract subsets
subset_out <- data.frame(i, sum(nodes[nodes$node %in% links[links$fromNode==i,]$toNode, ]$revenueYear))
subset_in <- data.frame(i, sum(nodes[nodes$node %in% links[links$toNode==i,]$fromNode, ]$revenueYear))
sub_g <- make_ego_graph(graph=g, order=order, nodes=i)[[1]]
subset_subGr <- data.frame(i, sum(nodes[nodes$node %in% names(as.list(V(sub_g))), ]$revenueYear))
# rename columns
names(subset_out) <- c("V1", "V2")
names(subset_in) <- c("V1", "V2")
names(subset_subGr) <- c("V1", "V2")
# append to overall dataframe
outDir_rev_df <- rbind(outDir_rev_df, subset_out)
inDir_rev_df <- rbind(inDir_rev_df, subset_in)
subGr_rev_df <- rbind(subGr_rev_df, subset_subGr)
}
outDir_rev_df <- outDir_rev_df[-c(1), ]
names(outDir_rev_df) <- c("node", "comb_outDir_rev")
inDir_rev_df <- inDir_rev_df[-c(1), ]
names(inDir_rev_df) <- c("node", "comb_inDir_rev")
subGr_rev_df <- subGr_rev_df[-c(1), ]
names(subGr_rev_df) <- c("node", "comb_subGr_rev")
print("50% done...")
###############################################################################
###### create features
###### weighted PageRank
nodes_rel_wgts <- cbind(nodes$node, page.rank(g, directed=TRUE)$vector)
nodes_rel_wgts <- nodes_rel_wgts[order(nodes_rel_wgts[, 2], decreasing=TRUE),]
wgts_df <- as.data.frame(nodes_rel_wgts)
names(wgts_df) <- c("node", "wgt_pr")
wgts_df$node <- row.names(wgts_df)
###### out-degree (hubs)
out_matrix <- as.matrix(degree(g, mode="out"))
out_matrix <- data.frame(row.names(out_matrix), out_matrix, row.names=NULL)
names(out_matrix) <- c("node", "out_deg")
###### in-degree
in_matrix <- as.matrix(degree(g, mode="in"))
in_matrix <- data.frame(row.names(in_matrix), in_matrix, row.names=NULL)
names(in_matrix) <- c("node", "in_deg")
###### total-degree
total_matrix <- as.matrix(degree(g, mode="total"))
total_matrix <- data.frame(row.names(total_matrix), total_matrix, row.names=NULL)
names(total_matrix) <- c("node", "total_deg")
###### betweenness centrality
betw_centr <- betweenness(g, v = V(g), directed = TRUE)
betw_centr_mat <- data.frame(names(betw_centr), betw_centr, row.names=NULL)
colnames(betw_centr_mat) <- c("node", "betw_centr")
###### closeness centrality (full graph)
clos_centr_fullGr <- closeness(g, v=V(g), mode="out")
clos_centr_fullGr_mat <- data.frame(names(clos_centr_fullGr), clos_centr_fullGr, row.names=NULL)
colnames(clos_centr_fullGr_mat) <- c("node", "clos_centr_fullGr")
###### subgraph: closeness centrality, density, transitivity
clos_centr_lst <- c()
clustering_lst <- c()
density_lst <- c()
count <- 1
for (i in nodes$node) {
if (count == 5000) {
print("75% done...")
}
count <- count + 1
sub_graph <- make_ego_graph(g, order=1, nodes=i, mode="out")[[1]]
clos_centr <- closeness(sub_graph, v=i, mode="out")
density <- edge_density(sub_graph)
clos_centr_lst <- c(clos_centr_lst, clos_centr)
density_lst <- c(density_lst, density)
}
clos_centr_lst[is.nan(clos_centr_lst)] <- 0
density_lst[is.nan(density_lst)] <- 0
### closeness centrality (subgraph)
clos_centr_subGr_mat <- data.frame(nodes$node, clos_centr_lst, row.names=NULL)
colnames(clos_centr_subGr_mat) <- c("node", "clos_centr_subGr")
### density connectedness (subgraph)
density_subGr_mat <- data.frame(nodes$node, density_lst, row.names=NULL)
colnames(density_subGr_mat) <- c("node", "density_subGr")
###### local clustering
cluster_coeff_mat <- data.frame(nodes$node, transitivity(g, type="local"))
colnames(cluster_coeff_mat) <- c("node", "cluster_coeff")
cluster_coeff_mat$cluster_coeff[is.nan(cluster_coeff_mat$cluster_coeff)] <- 0
###### average strength of edges by out-node
outAvgStr_rev <- links %>%
group_by(fromNode) %>%
summarise(avg_strength = mean(strength))
###### average strength of edges by in-node
inAvgStr_rev <- links %>%
group_by(toNode) %>%
summarise(avg_strength = mean(strength))
###############################################################################
###### compute correlations & regressions
results_for_corr_plots <- list()
results_regressions <- list()
###### build dataframe
data_revenue <- nodes %>%
left_join(outDir_rev_df, by="node") %>%
left_join(inDir_rev_df, by="node") %>%
left_join(subGr_rev_df, by="node") %>%
left_join(wgts_df, by="node") %>%
left_join(out_matrix, by="node") %>%
left_join(in_matrix, by="node") %>%
left_join(betw_centr_mat, by="node") %>%
left_join(clos_centr_fullGr_mat, by="node") %>%
left_join(clos_centr_subGr_mat, by="node") %>%
left_join(density_subGr_mat, by="node") %>%
left_join(cluster_coeff_mat, by="node") %>%
left_join(outAvgStr_rev, by=c("node" = "fromNode")) %>%
left_join(inAvgStr_rev, by=c("node" = "toNode")) %>%
mutate(node = as.factor(node),
avg_str_out = avg_strength.x,
avg_str_in = avg_strength.y,
avg_str_out = replace(avg_str_out, is.na(avg_str_out) == TRUE, 0.0),
avg_str_in = replace(avg_str_in, is.na(avg_str_in) == TRUE, 0.0)) %>%
select(-avg_strength.x, -avg_strength.y,
Indvdl_Revenue = revenueYear,
Directs_Out_Revenue = comb_outDir_rev,
Directs_In_Revenue = comb_inDir_rev,
Subgraph_Revenue = comb_subGr_rev,
Weighted_PageRank = wgt_pr,
Degrees_Out = out_deg,
Degrees_In = in_deg,
Betweenness_Centrality = betw_centr,
Closeness_Centrality_FullGraph = clos_centr_fullGr,
Closeness_Centrality_Subgraph = clos_centr_subGr,
Density_Subgraph = density_subGr,
Local_Clustering = cluster_coeff,
Mean_Edge_Strength_Out = avg_str_out,
Mean_Edge_Strength_In = avg_str_in)
head(data_revenue)
data_revenue_logY <- data_revenue
data_revenue_logY$Indvdl_Revenue <- log(data_revenue_logY$Indvdl_Revenue)
data_revenue_logY$Subgraph_Revenue <- log(data_revenue_logY$Subgraph_Revenue)
# log(revenueYear), log(comb_subGr_rev), log(comb_outDir_rev)
data_revenue_logY_subsetOut <- data_revenue_logY
data_revenue_logY_subsetOut <- data_revenue_logY_subsetOut[data_revenue_logY_subsetOut$Directs_Out_Revenue > 0, ]
data_revenue_logY_subsetOut$Directs_Out_Revenue <- log(data_revenue_logY_subsetOut$Directs_Out_Revenue)
# log(revenueYear), log(comb_subGr_rev), log(comb_inDir_rev)
data_revenue_logY_subsetIn <- data_revenue_logY
data_revenue_logY_subsetIn <- data_revenue_logY_subsetIn[data_revenue_logY_subsetIn$Directs_In_Revenue > 0, ]
data_revenue_logY_subsetIn$Directs_In_Revenue <- log(data_revenue_logY_subsetIn$Directs_In_Revenue)
# log(revenueYear), log(comb_subGr_rev), log(comb_outDir_rev), log(comb_inDir_rev)
data_revenue_logY_trunc0 <- data_revenue_logY_subsetOut[data_revenue_logY_subsetOut$Directs_In_Revenue > 0, ]
data_revenue_logY_trunc0$Directs_In_Revenue <- log(data_revenue_logY_trunc0$Directs_In_Revenue)
### store results
results_for_corr_plots$data_revenue_logY_subsetOut <- data_revenue_logY_subsetOut
results_for_corr_plots$data_revenue_logY_subsetIn <- data_revenue_logY_subsetIn
results_for_corr_plots$data_revenue_logY_trunc0 <- data_revenue_logY_trunc0
### store indices
idx <- select(data_revenue_logY_trunc0, node)
data_revenue_logY_trunc0 <- select(data_revenue_logY_trunc0, -node)
head(idx)
head(data_revenue_logY_trunc0)
dim(data_revenue_logY_trunc0)
head(full_features)
customer_ids <- idx # full_graph_results$idx
exp(5.714755)
y_ix <- which(colnames(full_features) == "Indvdl_Revenue")
X_ix <- c(which(colnames(full_features) == "Subgraph_Revenue"),
which(colnames(full_features) == "Closeness_Centrality_FullGraph"),
which(colnames(full_features) == "Weighted_PageRank"),
which(colnames(full_features) == "Density_Subgraph"))
# create predictions
data_indRev <- full_features[, c(y_ix, X_ix)]
ols_indRev <- lm(Indvdl_Revenue ~ ., data=data_indRev)
preds_indRev <- predict(ols_indRev, newdata=data_indRev[, -y_ix])
# create ranking table
rank_indRev <- cbind(customer_ids, preds_indRev)
colnames(rank_indRev) <- c("nodes", "preds_indRev")
head(rank_indRev0)
head(rank_indRev)
rank_indRev <- cbind(customer_ids, exp(preds_indRev))
colnames(rank_indRev) <- c("nodes", "preds_indRev")
head(rank_indRev)
y_ix <- which(colnames(full_features) == "Directs_Out_Revenue")
X_ix <- c(which(colnames(full_features) == "Directs_In_Revenue"),
which(colnames(full_features) == "Subgraph_Revenue"),
which(colnames(full_features) == "Density_Subgraph"),
which(colnames(full_features) == "Closeness_Centrality_FullGraph"))
# create predictions
data_outRev <- full_features[, c(y_ix, X_ix)]
ols_outRev <- lm(Indvdl_Revenue ~ ., data=data_outRev)
preds_outRev <- predict(ols_outRev, newdata=data_outRev[, -y_ix])
# create ranking table
rank_outRev <- cbind(customer_ids, exp(preds_outRev))
colnames(rank_outRev) <- c("nodes", "preds_outRev")
y_ix <- which(colnames(full_features) == "Directs_Out_Revenue")
X_ix <- c(which(colnames(full_features) == "Directs_In_Revenue"),
which(colnames(full_features) == "Subgraph_Revenue"),
which(colnames(full_features) == "Density_Subgraph"),
which(colnames(full_features) == "Closeness_Centrality_FullGraph"))
# create predictions
data_outRev <- full_features[, c(y_ix, X_ix)]
ols_outRev <- lm(Directs_Out_Revenue ~ ., data=data_outRev)
preds_outRev <- predict(ols_outRev, newdata=data_outRev[, -y_ix])
# create ranking table
rank_outRev <- cbind(customer_ids, exp(preds_outRev))
colnames(rank_outRev) <- c("nodes", "preds_outRev")
head*full_features90
head(full_features)
y_ix <- which(colnames(full_features) == "Directs_Out_Revenue")
X_ix <- c(which(colnames(full_features) == "Directs_In_Revenue"),
which(colnames(full_features) == "Subgraph_Revenue"),
which(colnames(full_features) == "Density_Subgraph"),
which(colnames(full_features) == "Closeness_Centrality_FullGraph"))
# create predictions
data_outRev <- full_features[, c(y_ix, X_ix)]
head(data_outRev)
ols_outRev <- lm(Directs_Out_Revenue ~ ., data=data_outRev)
preds_outRev <- predict(ols_outRev, newdata=data_outRev[, -y_ix])
head(data_outRev[, -y_ix])
y_ix <- which(colnames(full_features) == "Directs_Out_Revenue")
X_ix <- c(which(colnames(full_features) == "Directs_In_Revenue"),
which(colnames(full_features) == "Subgraph_Revenue"),
which(colnames(full_features) == "Density_Subgraph"),
which(colnames(full_features) == "Closeness_Centrality_FullGraph"))
data_outRev <- full_features[, c(y_ix, X_ix)]
ols_outRev <- lm(Directs_Out_Revenue ~ ., data=data_outRev)
head(data_outRev[, -y_ix]0)
head(data_outRev[, -y_ix])
head(data_outRev)
y_ix
preds_outRev <- predict(ols_outRev, newdata=data_outRev[, -1])
head(data_outRev[, -1])
rank_outRev <- cbind(customer_ids, exp(preds_outRev))
colnames(rank_outRev) <- c("nodes", "preds_outRev")
data_inRev <- full_features[, c(y_ix, X_ix)]
ols_inRev <- lm(Directs_In_Revenue ~ ., data=data_inRev)
preds_inRev <- predict(ols_inRev, newdata=data_inRev[, -1])
# create ranking table
rank_inRev <- cbind(customer_ids, preds_inRev)
colnames(rank_inRev) <- c("nodes", "preds_inRev")
y_ix <- which(colnames(full_features) == "Directs_In_Revenue")
X_ix <- c(which(colnames(full_features) == "Directs_Out_Revenue"),
which(colnames(full_features) == "Subgraph_Revenue"),
which(colnames(full_features) == "Density_Subgraph"),
which(colnames(full_features) == "Indvdl_Revenue"))
# create predictions
data_inRev <- full_features[, c(y_ix, X_ix)]
head(data_inRev)
ols_inRev <- lm(Directs_In_Revenue ~ ., data=data_inRev)
preds_inRev <- predict(ols_inRev, newdata=data_inRev[, -1])
rank_inRev <- cbind(customer_ids, exp(preds_inRev))
colnames(rank_inRev) <- c("nodes", "preds_inRev")
head(rank_outRev0)
head(rank_outRev)
head(rank_inRev)
data_subRev <- full_features[, c(y_ix, X_ix)]
ols_subRev <- lm(Subgraph_Revenue ~ ., data=data_subRev)
preds_subRev <- predict(ols_subRev, newdata=data_subRev[, -1])
# create ranking table
rank_subRev <- cbind(customer_ids, exp(preds_subRev))
colnames(rank_subRev) <- c("nodes", "preds_subRev")
y_ix <- which(colnames(full_features) == "Subgraph_Revenue")
X_ix <- c(which(colnames(full_features) == "Closeness_Centrality_FullGraph"),
which(colnames(full_features) == "Directs_Out_Revenue"),
which(colnames(full_features) == "Weighted_PageRank"),
which(colnames(full_features) == "Directs_In_Revenue"),
which(colnames(full_features) == "Directs_In_Revenue"))
# create predictions
data_subRev <- full_features[, c(y_ix, X_ix)]
ols_subRev <- lm(Subgraph_Revenue ~ ., data=data_subRev)
preds_subRev <- predict(ols_subRev, newdata=data_subRev[, -1])
# create ranking table
rank_subRev <- cbind(customer_ids, exp(preds_subRev))
colnames(rank_subRev) <- c("nodes", "preds_subRev")
head(data_subRev)
y_ix <- which(colnames(full_features) == "Subgraph_Revenue")
X_ix <- c(which(colnames(full_features) == "Closeness_Centrality_FullGraph"),
which(colnames(full_features) == "Directs_Out_Revenue"),
which(colnames(full_features) == "Weighted_PageRank"),
which(colnames(full_features) == "Directs_In_Revenue"),
which(colnames(full_features) == "Indvdl_Revenue"))
# create predictions
data_subRev <- full_features[, c(y_ix, X_ix)]
ols_subRev <- lm(Subgraph_Revenue ~ ., data=data_subRev)
preds_subRev <- predict(ols_subRev, newdata=data_subRev[, -1])
# create ranking table
rank_subRev <- cbind(customer_ids, exp(preds_subRev))
colnames(rank_subRev) <- c("nodes", "preds_subRev")
head(rank_subRev)
head(names)
head(node_name_id_map)
customer_rankings <- node_name_id_map %>%
left_join(rank_indRev, by="names") %>%
left_join(rank_outRev, by="names") %>%
left_join(rank_inRev, by="names") %>%
left_join(rank_subRev, by="names")
customer_rankings <- node_name_id_map %>%
left_join(rank_indRev, by=c("names" = "nodes"))
head(customer_rankings)
customer_rankings <- node_name_id_map %>%
left_join(rank_indRev, by=c("names" = "nodes")) %>%
left_join(rank_outRev, by=c("names" = "nodes")) %>%
left_join(rank_inRev, by=c("names" = "nodes")) %>%
left_join(rank_subRev, by=c("names" = "nodes"))
customer_rankings <- node_name_id_map %>%
left_join(rank_indRev, by=c("names" = "nodes")) %>%
left_join(rank_outRev, by=c("names" = "nodes")) %>%
left_join(rank_inRev, by=c("names" = "nodes")) %>%
left_join(rank_subRev, by=c("names" = "nodes"))
customer_rankings <- node_name_id_map %>%
left_join(rank_indRev, by=c("names" = "nodes")) %>%
left_join(rank_outRev, by=c("names" = "nodes")) %>%
left_join(rank_inRev, by=c("names" = "nodes")) %>%
left_join(rank_subRev, by=c("names" = "nodes"))
head(node_name_id_map0)
head(node_name_id_map)
node_name_id_map %>%
left_join(rank_indRev, by=c("names" = "nodes"))
customer_rankings <- node_name_id_map %>%
left_join(rank_indRev, by=c("names" = "nodes"))
###### imports
library(beepr)
library(random)
library(dplyr)
library(sna)
library(igraph)
library(glmnet)
library(randomForest)
library(corrplot)
library(GGally)
customer_rankings <- node_name_id_map %>%
left_join(rank_indRev, by=c("names" = "nodes")) %>%
left_join(rank_outRev, by=c("names" = "nodes")) %>%
left_join(rank_inRev, by=c("names" = "nodes")) %>%
left_join(rank_subRev, by=c("names" = "nodes"))
head(customer_rankings)
write.csv(customer_rankings, "customer_rankings.csv", row.names=FALSE)
